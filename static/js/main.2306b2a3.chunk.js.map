{"version":3,"sources":["components/FormContents.js","components/LEDForm.js","components/Footer.js","components/Home.js","serviceWorker.js","index.js"],"names":["FormContents","props","formSubmission","type","sendFormCallback","activeForm","name","current","value","color","toUpperCase","renderForm","renderCompletedForm","renderGenericForm","renderColorPickerForm","descriptions","React","createRef","index","this","className","style","margin","width","ref","placeholder","defaultValue","backgroundColor","borderStyle","borderWidth","waves","onClick","changeFormCallback","isLoading","Component","LEDForm","changeForm","form","state","setState","sendForm","mode","axios","post","apiDomain","then","clickedButton","height","borderRadius","fontSize","unclickedButton","s","window","innerWidth","Footer","href","Home","display","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2306b2a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button, Row} from 'react-materialize';\r\nimport '../css/FormContents.css'\r\n\r\nclass FormContents extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.descriptions = [\r\n            \"Turns off the lights\",\r\n            \"Sets the lights to the specified color\",\r\n            \"Sets the lights to a rainbow fade\",\r\n            \"Sets the lights to flash the specified color (AKA wake me up in the middle of the night).\"\r\n        ]\r\n\r\n        this.name = React.createRef();\r\n        this.color = React.createRef();\r\n\r\n    }\r\n\r\n    formSubmission = (type) => {\r\n        if (type === 0) {\r\n            this.props.sendFormCallback(\r\n                this.props.activeForm,\r\n                this.name.current.value === \"\" ? \"Anon\" : this.name.current.value\r\n            );\r\n        }else if (type === 1) {\r\n            this.props.sendFormCallback(\r\n                this.props.activeForm, \r\n                this.name.current.value === \"\" ? \"Anon\" : this.name.current.value,\r\n                this.color.current.value.toUpperCase()\r\n            );\r\n        }\r\n    }\r\n\r\n    renderForm = () => {\r\n        switch(this.props.activeForm) {\r\n            case -3: return this.renderCompletedForm();\r\n            case -2: return <p></p>\r\n            case -1: return this.renderGenericForm();\r\n            case 0: return this.renderColorPickerForm();\r\n            case 1: return this.renderGenericForm();\r\n            case 2: return this.renderColorPickerForm();\r\n            default: return <p>There has been an error</p>\r\n        }\r\n    }\r\n\r\n    renderGenericForm() {\r\n        let index = this.props.activeForm + 1;\r\n\r\n        return(\r\n            <div className=\"FormContents\">\r\n                <Row>\r\n                    <h6>{this.descriptions[index]}</h6>\r\n                </Row>\r\n                <Row>\r\n                    Name: <input style={{margin: \"0 1rem\", width: \"25%\", color: \"white\"}} ref={this.name} type=\"text\" placeholder=\"Anonymous\" defaultValue=\"\"/> \r\n                </Row>\r\n                <Row>\r\n                    <Button style={{backgroundColor: \"#10131a\", borderStyle: \"solid\", borderWidth: \"1px\"}} \r\n                        waves=\"green\" \r\n                        onClick={() => this.formSubmission(0)}>\r\n                        Submit\r\n                    </Button>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderColorPickerForm() {\r\n        let index = this.props.activeForm + 1;\r\n        return(\r\n            <div className=\"FormContents\">\r\n                <Row>\r\n                    <h6>{this.descriptions[index]}</h6>\r\n                </Row>\r\n                <Row>\r\n                    Name: <input style={{margin: \"0 1rem\", width: \"25%\", color: \"white\"}} ref={this.name} type=\"text\" placeholder=\"Anonymous\" defaultValue=\"\"/> \r\n                </Row>\r\n                <Row>\r\n                    Color: <input style={{margin: \"0 1rem\"}} ref={this.color} type=\"color\" defaultValue=\"#FFFFFF\"/> \r\n                </Row>\r\n                <Row>\r\n                    <Button style={{backgroundColor: \"#10131a\", borderStyle: \"solid\", borderWidth: \"1px\"}} \r\n                        waves=\"green\" \r\n                        onClick={() => this.formSubmission(1)}>\r\n                        Submit\r\n                    </Button>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCompletedForm() {\r\n        return(\r\n            <div className=\"FormContents\">\r\n                <Row>\r\n                    <h5>Form submitted!</h5>\r\n                </Row>\r\n                <Row>\r\n                    <Button style={{backgroundColor: \"#10131a\", borderStyle: \"solid\", borderWidth: \"1px\"}} \r\n                        waves=\"green\" \r\n                        onClick={() => this.props.changeFormCallback(-2)}>\r\n                        OK\r\n                    </Button>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return this.props.isLoading ? <div>Sending...</div> : this.renderForm();\r\n    }\r\n}\r\n\r\nexport default FormContents;","import React from 'react';\r\nimport axios from 'axios';\r\nimport {Container, Button, Col, Row} from 'react-materialize';\r\nimport FormContents from './FormContents';\r\n\r\nclass LEDForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeForm: -2,\r\n            isLoading: false\r\n        };\r\n        this.apiDomain = \"https://remote-leds.herokuapp.com/queue\";\r\n    }\r\n\r\n    changeForm = (form) => {\r\n        if(!this.state.isLoading) {\r\n            this.setState({\r\n                activeForm: form\r\n            });\r\n        }\r\n    }\r\n\r\n    sendForm = (mode, name, color) => {\r\n        this.setState({isLoading: true});\r\n\r\n        if(color) { //Form with color\r\n            axios.post(this.apiDomain + \"/enqueue/\", {\r\n                mode: mode,\r\n                name: name,\r\n                color: color\r\n            }).then(() => \r\n                this.setState({\r\n                    isLoading: false, \r\n                    activeForm: -3\r\n                })\r\n            );\r\n        }else{ //Basic form with no other properties\r\n            axios.post(this.apiDomain + \"/enqueue/\", {\r\n                mode: mode,\r\n                name: name\r\n            }).then(() => \r\n                this.setState({\r\n                    isLoading: false,\r\n                    activeForm: -3\r\n                })\r\n            );\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        let clickedButton = {\r\n            color: \"lightblue\",\r\n            width: \"100%\",\r\n            height: \"50px\",\r\n            backgroundColor: \"#10131a\",\r\n            borderStyle: \"solid\",\r\n            borderWidth: \"3px\",\r\n            borderRadius: \"5px\",\r\n            fontSize: \"16pt\"\r\n        }\r\n\r\n        let unclickedButton = {\r\n            color: \"white\",\r\n            width: \"80%\",\r\n            height: \"50px\",\r\n            backgroundColor: \"#10131a\",\r\n            borderStyle: \"solid\",\r\n            borderWidth: \"1px\",\r\n            borderRadius: \"5px\",\r\n            fontSize: \"14pt\"\r\n        };\r\n\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col s={3}>\r\n                        <Button style={this.state.activeForm === -1 ? clickedButton : unclickedButton} waves=\"light\" onClick={() => this.changeForm(-1)}>\r\n                            {window.innerWidth > 400 ? \"Turn Off\" : \"1\"}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col s={3}>\r\n                        <Button style={this.state.activeForm === 0 ? clickedButton : unclickedButton} waves=\"light\" onClick={() => this.changeForm(0)}>\r\n                            {window.innerWidth > 400 ? \"Set Color\" : \"2\"}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col s={3}>\r\n                        <Button style={this.state.activeForm === 1 ? clickedButton : unclickedButton} waves=\"light\" onClick={() => this.changeForm(1)}>\r\n                            {window.innerWidth > 400 ? \"Rainbow\" : \"3\"}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col s={3}>\r\n                        <Button style={this.state.activeForm === 2 ? clickedButton : unclickedButton} waves=\"light\" onClick={() => this.changeForm(2)}>\r\n                            {window.innerWidth > 400 ? \"Flash\" : \"4\"}\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n                <FormContents activeForm={this.state.activeForm} changeFormCallback={this.changeForm} sendFormCallback={this.sendForm} isLoading={this.state.isLoading}></FormContents>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LEDForm;","import React from 'react';\r\nimport '../css/Footer.css'\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"Footer\"> \r\n                Made by <a href=\"https://github.com/JoshGuo\">Joshua Guo</a> | Please try not to break this &lt;3 \r\n             </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport '../css/Home.css';\r\nimport {Container} from 'react-materialize';\r\nimport LEDForm from './LEDForm'\r\nimport Footer from './Footer'\r\n\r\nclass Home extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Home\">\r\n                <Container>\r\n                    <div className=\"Header\">\r\n                        <div style={{display:\"inline-block\"}}>\r\n                            Change my LEDs :&gt;\r\n                        </div>\r\n                    </div>\r\n                    <p style={{fontSize: \"15pt\"}}>Welcome!<br/>\r\n                        Made this out of quarantine boredom. Enjoy.\r\n                    </p>\r\n                    <LEDForm/>\r\n                </Container>\r\n                <Footer/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport Home from './components/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}